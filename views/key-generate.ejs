<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="/">PGP Express</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="/key-management">Key Management <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="encrypt">Encrypt</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="decrypt">Decrypt</a>
            </li>
        </ul>
    </div>
</nav>
<div class="main">
    <h1 class="display-4">Generate key pair</h1>
    <form action="/generate" method="POST">
        <div class="form-group">
            <label for="exampleInputName1">Name</label>
            <input type="text" class="form-control" id="exampleInputName1" name="name" aria-describedby="nameHelp"
                placeholder="Enter name" required>
        </div>
        <div class="form-group">
            <label for="exampleInputEmail1">Email address</label>
            <input type="email" class="form-control" id="exampleInputEmail1" name="email" aria-describedby="emailHelp"
                placeholder="Enter email" required>
        </div>
        <div class="form-group">
            <label for="algorithm">Algorithm</label>
            <select class="form-control" id="algorithm" name="algorithm">
                <option>RSA</option>
                <option>Other</option>
            </select>
        </div>
        <div class="form-group">
            <label for="key-size">Key Size</label>
            <select class="form-control" id="key-size" name="size">
                <option>2048</option>
                <option>4096</option>
            </select>
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">Password</label>
            <input type="password" class="form-control" id="exampleInputPassword1" name="password"
                placeholder="Password" required>
        </div>
        <button type="submit" class="btn btn-primary">Generate</button>
    </form>
    <% if (key!=1) { %>
    <hr>
    <div class="form-group">
        <label for="public-key">Public Key</label>
        <textarea class="form-control" id="public-key" rows="3" disabled><%= key.publicKeyArmored %></textarea>
    </div>
    <hr>
    <div class="form-group">
        <label for="private-key">Private Key</label>
        <textarea class="form-control" id="private-key" rows="3" disabled><%= key.privateKeyArmored %></textarea>
    </div>
    <hr>
    <div class="form-group">
        <label for="revoc-sign">Revocation Signature</label>
        <textarea class="form-control" id="revoc-sign" rows="3" disabled><%= key.revocationCertificate %></textarea>
    </div>
    <button type="button" value="save" id="save">Download</button>

    <% } %>
    <script>
        function saveTextAsFile(id, name) {
            var textToWrite = document.getElementById(id).value;
            textToWrite = textToWrite.replace(/\n/g, "\r\n");
            var textFileAsBlob = new Blob([textToWrite], { type: 'text/plain' });
            var fileNameToSaveAs = name;

            var downloadLink = document.createElement("a");
            downloadLink.download = fileNameToSaveAs;
            downloadLink.innerHTML = "Download File";
            if (window.webkitURL != null) {
                // Chrome allows the link to be clicked without actually adding it to the DOM.
                downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
            } else {
                // Firefox requires the link to be added to the DOM before it can be clicked.
                downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
                downloadLink.onclick = destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }

            downloadLink.click();
        }
        function saveFiles() {
            saveTextAsFile('public-key', 'public-key.txt');
            saveTextAsFile('private-key', 'private-key.txt');
            saveTextAsFile('revoc-sign', 'revocation-signature.txt');
        }
        var button = document.getElementById('save');
        button.addEventListener('click', saveFiles);

        function destroyClickedElement(event) {
            // remove the link from the DOM
            document.body.removeChild(event.target);
        }
    </script>
</div>